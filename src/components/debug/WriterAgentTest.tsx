import React, { useState } from 'react';
import { LabWriterAgent as WriterAgent } from '../../services/lab/regular/agents/writerAgent';
import type { ResearchResult } from '../../services/research/types';
import { logger } from '../../utils/logger';

export const WriterAgentTest: React.FC = () => {
  const [testing, setTesting] = useState(false);
  const [result, setResult] = useState<ResearchResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const runTest = async () => {
    setTesting(true);
    setError(null);
    setResult(null);

    try {
      logger.info('Starting WriterAgent test...');
      
      const testData: ResearchResult = {
        query: "Meta's Smart Wristband Can Control Devices Like Tom Cruise in 'Minority Report'",
        perspectives: [],
        results: [
          {
            title: "Meta's Smart Wristband: Revolutionary Gesture Control Technology",
            url: 'https://example.com/meta-wristband-1',
            content: "Meta has developed a groundbreaking smart wristband that uses surface electromyography (sEMG) to detect muscle movements in the wrist, enabling users to control digital devices through gestures. The technology can detect electrical signals generated by muscle movements before they become visible motion, allowing for precise control of digital interfaces. The wristband translates subtle muscle impulses into digital actions using advanced neural networks trained on data from thousands of volunteers."
          },
          {
            title: "How Meta's Wristband Technology Works: sEMG and Neural Networks",
            url: 'https://example.com/meta-wristband-2',
            content: "The wristband uses surface electromyography (sEMG) to read electrical signals in the forearm from intended finger movements, capturing even the intention to move before actual motion occurs. Neural networks trained on data from over 6,000 volunteers enable high recognition rates and adaptability across users. Users can achieve up to 90% accuracy and writing speeds of about 21 words per minute, improving as users become familiar with it."
          },
          {
            title: "Privacy and Accessibility Implications of Meta's Gesture Control",
            url: 'https://example.com/meta-wristband-3',
            content: "The technology raises privacy concerns due to its ability to decode muscle intentions, but offers significant accessibility benefits. The non-invasive design can help users with motor disabilities interact with technology more naturally. Meta aims to integrate this into their AR/VR ecosystem for more immersive interactions. The device works 'off-the-shelf' for new users, but can enhance performance with personalized calibration."
          }
        ]
      };

      const writerAgent = new WriterAgent();
      const startTime = Date.now();
      
      logger.info('Calling WriterAgent.execute...');
      const response = await writerAgent.execute(testData);
      
      const endTime = Date.now();
      logger.info('WriterAgent test completed', {
        timeTaken: endTime - startTime,
        success: response.success
      });

      setResult(response);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      logger.error('WriterAgent test failed:', err);
      setError(errorMessage);
    } finally {
      setTesting(false);
    }
  };

  return (
    <div className="fixed top-4 left-4 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg border max-w-md">
      <h3 className="font-bold mb-2">WriterAgent Test</h3>
      
      <button
        type="button"
        onClick={runTest}
        disabled={testing}
        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400"
      >
        {testing ? 'Testing...' : 'Test WriterAgent'}
      </button>

      {testing && (
        <div className="mt-2 text-sm text-gray-600">
          Running test... Check console for logs.
        </div>
      )}

      {error && (
        <div className="mt-2 text-sm text-red-600">
          Error: {error}
        </div>
      )}

      {result && (
        <div className="mt-2 text-sm">
          <div className="text-green-600 mb-1">
            Success: {result.success ? 'Yes' : 'No'}
          </div>
          {result.data && (
            <div className="text-gray-700 dark:text-gray-300">
              Content length: {result.data.content?.length || 0} chars
            </div>
          )}
        </div>
      )}
    </div>
  );
};
